# name: Docker Compose Build, Push, and Deploy to AWS EC2

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Step 2: Log in to Docker Hub
#       - name: Login to Docker Hub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u thashenu --password-stdin
#         env:
#           DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

#       # Step 3: Write Secret to File
#       - name: Write Secret to File
#         run: echo "${{ secrets.ENVSECRET }}" > .env

#       # Step 4: Build and Push Docker images using Docker Compose
#       - name: Build and Push Docker images
#         run: |
#           docker-compose -f docker-compose.yml build
#           docker-compose -f docker-compose.yml push

#       # Step 5: Logout from Docker Hub (always run)
#       - name: Logout from Docker Hub
#         run: docker logout

#   deploy-to-ec2:
#     runs-on: ubuntu-latest
#     needs: build-and-push  # Ensure this job runs after build-and-push

#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Step 2: Write Secret to File
#       - name: Write Secret to File
#         run: printf "%s" "${{ secrets.ENVSECRET }}" > .env

#       # Step 3: Add SSH key for EC2 access
#       - name: Add SSH key
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2-key.pem
#           chmod 600 ~/.ssh/ec2-key.pem
#           ssh-keyscan ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts

#       # Step 4: Test SSH Connection
#       - name: Test SSH Connection
#         run: ssh -i ~/.ssh/ec2-key.pem ubuntu@${{ secrets.EC2_IP }} "echo 'SSH connection successful'"

#       # Step 5: Copy files to EC2 instance
#       - name: Copy files to EC2
#         run: |
#           scp -i ~/.ssh/ec2-key.pem .env docker-compose.yml ubuntu@${{ secrets.EC2_IP }}:/home/ubuntu

#       # Step 6: Deploy application on EC2 using Docker Compose
#       - name: Deploy application
#         run: |
#           ssh -i ~/.ssh/ec2-key.pem ubuntu@${{ secrets.EC2_IP }} "
#             sudo docker-compose -f /home/ubuntu/docker-compose.yml down
#             sudo docker-compose -f /home/ubuntu/docker-compose.yml pull
#             sudo docker-compose -f /home/ubuntu/docker-compose.yml up -d
#           "
